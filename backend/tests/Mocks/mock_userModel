const mock_userSchema = require("./mock_userSchema.js").mock_userSchema;
// const mock_userDatabase = require("./mock_userDatabase.js").mock_userDatabase;

class mock_userModel {
    static #database;

    user; /** @type {mock_userSchema} the user **/

    static set_database(databaset) {
        mock_userModel.#database = databaset;
    }

    constructor(JSON) {
        user = mock_userSchema.fromJSON(JSON);
    }

    save() {
        return new Promise((resolve, reject) => {
            saved_user = mock_userModel.#database.save(user);
            if (saved_user == null) { 
                reject(new Error("Failed to save user"));
            }
            else {
                resolve(saved_user);
            }
        });
    }

    checkUniqueUsername() {
        return mock_userSchema.checkUniqueUsername(user.username, mock_userModel);
    }

    checkUniqueEmail() {
        return mock_userSchema.checkUniqueEmail(user.email, mock_userModel);
    }

    async generateSession() {
        this.user.generateSession();
        await this.save();
    }

    async authSession(session_id) {
        if (session_id != this.user.session_id) { return false; }

        authorized = mock_userSchema.validateSession(session_id, Date.now(), user.session_id, user.session_date);
        if (!authorized) { 
            await this.save(); 
            return false;
        }

        return true;    
    }

    static findOne(JSON_requirements) {
        return new Promise((resolve, reject) => {
            user = mock_userModel.#database.findOne(JSON_requirements);
            if (!user) { reject(new Error("No user found")); }
            else { resolve(user); }
        });
    }

    static findByID(_id) {
        return new Promise((resolve, reject) => {
            user = mock_userModel.#database.findByID(_id);
            if (!user) { reject(new Error("No user found")); }
            else { resolve(user); }
        });
    }

    static findByIDAndDelete(_id) {
        return new Promise((resolve, reject) => {
            user = mock_userModel.#database.findByID(_id);
            if (!user) { reject(new Error("No user found")); }
            else {
                mock_userModel.#database.delete(user);
                resolve(user);
            }
        });
    }
}

exports = {
    mock_userModel: mock_userModel
}